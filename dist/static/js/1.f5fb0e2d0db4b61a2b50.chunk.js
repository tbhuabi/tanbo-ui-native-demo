webpackJsonp([1],{1e3:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Checkbox</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <div class="container">\n      <h3>不同风格的 Checkbox</h3>\n      <p>\n        <ui-input class="primary" type="checkbox"></ui-input>\n        <ui-input class="info" type="checkbox"></ui-input>\n        <ui-input class="danger" type="checkbox"></ui-input>\n        <ui-input class="warning" type="checkbox"></ui-input>\n        <ui-input class="success" type="checkbox"></ui-input>\n      </p>\n      <p style="font-size: 30px;">\n        <ui-input class="primary" type="checkbox"></ui-input>\n        <ui-input class="info" type="checkbox"></ui-input>\n        <ui-input class="danger" type="checkbox"></ui-input>\n        <ui-input class="warning" type="checkbox"></ui-input>\n        <ui-input class="success" type="checkbox"></ui-input>\n      </p>\n      <h3>包含在 label 内的</h3>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="c1" type="checkbox"></ui-input>\n          选项1为{{c1}}</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="c2" type="checkbox"></ui-input>\n          选项2为{{c2}}</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="c3" type="checkbox"></ui-input>\n          选项3为{{c3}}</label>\n      </p>\n      <h3>在 label 外的</h3>\n      <p>\n        <label for="id1">选项4为{{c4}}</label>\n        <ui-input [(ngModel)]="c4" forId="id1" type="checkbox"></ui-input>\n      </p>\n      <p>\n        <label for="id2">选项5为{{c5}}</label>\n        <ui-input [(ngModel)]="c5" forId="id2" type="checkbox"></ui-input>\n      </p>\n      <p>\n        <label for="id3">选项6为{{c6}}</label>\n        <ui-input [(ngModel)]="c6" forId="id3" type="checkbox"></ui-input>\n      </p>\n    </div>\n  </ui-content>\n</ui-page>\n'},1001:function(n,e){n.exports="`ui-input[type=checkbox]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `checked`     | `string` / `boolean`   | 设置是否选中  |\n| `checkedIcon`     | `string`   | 当控件选中时，显示的 icon class 名  |\n| `uncheckedIcon`     | `string`   | 当控件未选中时，显示的 icon class 名  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `change` | `boolean`   | `$event` 为当前控件是否选中。  |"},1002:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './radio-example.component.html'\n})\nexport class RadioExampleComponent {\n    r0: string = '';\n    r1: string = '';\n}"},1003:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Radio</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <div class="container">\n      <h3>不同风格的 Radio</h3>\n      <p>\n        <ui-input class="primary" type="radio"></ui-input>\n        <ui-input class="info" type="radio"></ui-input>\n        <ui-input class="danger" type="radio"></ui-input>\n        <ui-input class="warning" type="radio"></ui-input>\n        <ui-input class="success" type="radio"></ui-input>\n      </p>\n      <p style="font-size: 30px;">\n        <ui-input class="primary" type="radio"></ui-input>\n        <ui-input class="info" type="radio"></ui-input>\n        <ui-input class="danger" type="radio"></ui-input>\n        <ui-input class="warning" type="radio"></ui-input>\n        <ui-input class="success" type="radio"></ui-input>\n      </p>\n      <h3>包含在 label 内的</h3>\n      <p>选中的值为{{r0}}</p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="a"></ui-input>\n          选项1</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="b"></ui-input>\n          选项2</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="c"></ui-input>\n          选项3</label>\n      </p>\n      <h3>在 label 外的</h3>\n      <p>选中的值为{{r1}}</p>\n      <p>\n        <label for="id1">选项1</label>\n        <ui-input [(ngModel)]="r1" forId="id1" type="radio" name="name2" value="1"></ui-input>\n      </p>\n      <p>\n        <label for="id2">选项2</label>\n        <ui-input [(ngModel)]="r1" forId="id2" type="radio" name="name2" value="2"></ui-input>\n      </p>\n      <p>\n        <label for="id3">选项3</label>\n        <ui-input [(ngModel)]="r1" forId="id3" type="radio" name="name2" value="3"></ui-input>\n      </p>\n    </div>\n  </ui-content>\n</ui-page>\n'},1004:function(n,e){n.exports="`ui-input[type=radio]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `checked`     | `string` / `boolean`   | 设置是否选中  |\n| `checkedIcon`     | `string`   | 当控件选中时，显示的 icon class 名  |\n| `uncheckedIcon`     | `string`   | 当控件未选中时，显示的 icon class 名  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `change` | `string`   | `$event` 为当前选中控件的 value。  |"},1005:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './range-example.component.html'\n})\nexport class RangeExampleComponent {\n    progress: number = 50;\n}"},1006:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Range</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <div class="container">\n      <h3>不同风格的 Range</h3>\n      <p>\n        <ui-input class="primary" type="range"></ui-input>\n      </p>\n      <h3>弹出进度</h3>\n      <p>\n        <ui-input [showProgress]="true" class="info" type="range"></ui-input>\n      </p>\n      <h3>设置步长</h3>\n      <p>\n        <ui-input [step]="5" [showProgress]="true" class="success" type="range"></ui-input>\n      </p>\n      <h3>设置最小值</h3>\n      <p>\n        <ui-input [min]="20" [showProgress]="true" class="danger" type="range"></ui-input>\n      </p>\n      <h3>设置最大值</h3>\n      <p>\n        <ui-input [max]="60" [showProgress]="true" class="warning" type="range"></ui-input>\n      </p>\n      <h3>当前的拖动的进度为{{progress}}</h3>\n      <p>\n        <ui-input type="range" [(ngModel)]="progress"></ui-input>\n      </p>\n    </div>\n  </ui-content>\n</ui-page>\n'},1007:function(n,e){n.exports='`ui-input[type=range]` 组件的触摸功能 <strong class="color-danger">未做PC端兼容</strong>，只有在模拟器或手机上才有效果，你可以点击右上角的按扭，新开一个窗口，在模拟器中查看。\n\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `max`     | `number`   | 可选的最大值，默认为100  |\n| `min`     | `string`   | 可选的最小值，默认为0  |\n| `step`     | `string`   | 步长，默认为1  |\n| `showProgress`     | `boolean`   | 在拖动的时候是否弹出进度  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `change` | `number`   | `$event` 为控件的 value。  |'},1008:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './select-example.component.html',\n    styleUrls: ['./select-example.component.scss']\n})\nexport class SelectExampleComponent {\n    value: number = 1;\n}"},1009:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Select</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-list>\n      <ui-list-item>\n        <ui-list-inner>\n          <ui-list-thumbnail>value为{{value}}</ui-list-thumbnail>\n          <ui-select class="form-control" [(ngModel)]="value">\n            <ui-option value="1">选项1</ui-option>\n            <ui-option value="2">选项2</ui-option>\n            <ui-option value="3">选项3</ui-option>\n          </ui-select>\n        </ui-list-inner>\n      </ui-list-item>\n    </ui-list>\n  </ui-content>\n</ui-page>\n'},1010:function(n,e){n.exports="### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `selectedIndex`     | `number`   | 初始选中哪一项，默认为 0  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `change` | `number`   | `$event` 为控件的 value。  |\n\n\n## ui-option 组件\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `value`     | `string`   | 用于设置一项的值 |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前选项  |\n| `selected`     | `boolean`   | 初始是否选中  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `checked` | `OptionComponent`   | `$event` 为当前控件的实例。  |"},1011:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './switch-example.component.html'\n})\nexport class SwitchExampleComponent {\n    result: boolean = false;\n}"},1012:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Switch</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <div class="container">\n      <h3>不同风格的 Switch</h3>\n      <p>\n        <ui-switch class="primary"></ui-switch>\n        <ui-switch class="info"></ui-switch>\n        <ui-switch class="success"></ui-switch>\n        <ui-switch class="danger"></ui-switch>\n        <ui-switch class="warning"></ui-switch>\n      </p>\n      <p style="font-size: 30px;">\n        <ui-switch class="primary"></ui-switch>\n        <ui-switch class="info"></ui-switch>\n        <ui-switch class="success"></ui-switch>\n        <ui-switch class="danger"></ui-switch>\n        <ui-switch class="warning"></ui-switch>\n      </p>\n      <h3>是否选中 {{result}}</h3>\n      <ui-switch [(ngModel)]="result"></ui-switch>\n    </div>\n  </ui-content>\n</ui-page>\n'},1013:function(n,e){n.exports=""},1014:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './form-validator-example.component.html'\n})\nexport class FormValidatorExampleComponent {\n\n    data: any = {\n        name: '',\n        password: ''\n    };\n\n    submit() {\n        alert('通过了校验，提交成功了');\n    }\n}"},1015:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>FormValidator</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()">\n      <ui-list>\n        <ui-list-item>\n          <ui-list-thumbnail>姓名：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div><input type="text"\n                        class="form-control"\n                        #name="ngModel"\n                        [(ngModel)]="data.name"\n                        required\n                        minlength="3"\n                        name="name">\n              <div class="color-danger" *ngIf="name.errors && (name.dirty || name.touched)">\n                <span *ngIf="name.errors.required">必填项不能为空</span>\n                <span *ngIf="name.errors.minlength">至少输入3个字符</span>\n              </div>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n        <ui-list-item>\n          <ui-list-thumbnail>密码：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div>\n              <div><input type="text"\n                          class="form-control"\n                          #password="ngModel"\n                          [(ngModel)]="data.password"\n                          required\n                          minlength="8"\n                          name="password"></div>\n              <div class="color-danger" *ngIf="password.errors && (password.dirty || password.touched)">\n                <span *ngIf="password.errors.required">必填项不能为空</span>\n                <span *ngIf="password.errors.minlength">至少输入8个字符</span>\n              </div>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n      </ui-list>\n\n      <p class="container">\n        <button type="submit" class="btn primary btn-block">提交</button>\n      </p>\n    </form>\n  </ui-content>\n</ui-page>\n'},1016:function(n,e){n.exports="`uiValidateForm` 组件主要用来弥补表单提交时， angular 框架没有做二次校验的功能，通过`uiValidateForm`可以在用户点击提交表单时，再做一次校验。\n\n### 输入属性 @Input()\n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `uiValidateForm`      | `NgForm`   |  |"},1017:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './model-validator-example.component.html'\n})\nexport class ModelValidatorExampleComponent {\n\n    data: any = {\n        mobilePhone: '',\n        verifyCode: ''\n    };\n\n    submit() {\n        alert('通过了校验，提交成功了');\n    }\n}"},1018:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>ModelValidator</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <p class="container">当获取验证码时，需要先校验手机号码</p>\n    <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()">\n      <ui-list>\n        <ui-list-item>\n          <ui-list-thumbnail>手机号码：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div>\n              <input type="text"\n                     class="form-control"\n                     #mobilePhone="ngModel"\n                     [(ngModel)]="data.mobilePhone"\n                     required\n                     minlength="3"\n                     name="name">\n              <p class="color-danger" *ngIf="mobilePhone.errors && (mobilePhone.dirty || mobilePhone.touched)">\n                <span *ngIf="mobilePhone.errors.required">必填项不能为空</span>\n                <span *ngIf="mobilePhone.errors.minlength">至少输入3个字符</span>\n              </p>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n        <ui-list-item>\n          <ui-list-inner>\n            <div>\n              <button class="btn btn-primary" type="button" [uiValidateModel]="mobilePhone">点击获取验证码</button>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n        <ui-list-item>\n          <ui-list-thumbnail>密码：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div>\n              <input type="text"\n                     class="form-control"\n                     #verifyCode="ngModel"\n                     [(ngModel)]="data.verifyCode"\n                     required\n                     minlength="8"\n                     name="verifyCode">\n              <p class="color-danger" *ngIf="verifyCode.errors && (verifyCode.dirty || verifyCode.touched)">\n                <span *ngIf="verifyCode.errors.required">必填项不能为空</span>\n                <span *ngIf="verifyCode.errors.minlength">至少输入8个字符</span>\n              </p>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n      </ui-list>\n      <p class="container">\n        <button type="submit" class="btn primary btn-block">提交</button>\n      </p>\n    </form>\n  </ui-content>\n</ui-page>\n'},1019:function(n,e){n.exports="`uiValidateModel` 主要用于在触发某件事时，需先校验某一个表单\n\n### 输入属性 @Input()\n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `uiValidateModel`      | `NgModel`   |  |"},865:function(n,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i.d(e,"FormsExampleModule",function(){return y});var t=i(1),u=i(46),a=i(38),o=i(26),r=i(323),l=i(985),s=i(885),c=i(886),p=i(887),d=i(888),m=i(889),b=i(890),h=i(891),f=i(892),g=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},y=function(){function n(){}return n=g([Object(t.I)({imports:[a.b,u.h.forChild(l.a),r.g,r.e,o.a],declarations:[s.a,c.a,p.a,d.a,m.a,b.a,h.a,f.a]})],n)}()},885:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.loadingState=!1}return n.prototype.load=function(){var n=this;this.loadingState=!0,setTimeout(function(){n.loadingState=!1},3e3)},n=u([Object(t.n)({template:i(986)})],n)}()},886:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.c1=!1,this.c2=!1,this.c3=!1,this.c4=!1,this.c5=!1,this.c6=!1}return n=u([Object(t.n)({template:i(987)})],n)}()},887:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.r0="",this.r1=""}return n=u([Object(t.n)({template:i(988)})],n)}()},888:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.progress=50}return n=u([Object(t.n)({template:i(989)})],n)}()},889:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.value=1}return n=u([Object(t.n)({template:i(990),styles:[i(991)]})],n)}()},890:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.result=!1}return n=u([Object(t.n)({template:i(993)})],n)}()},891:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.data={name:"",password:""}}return n.prototype.submit=function(){alert("通过了校验，提交成功了")},n=u([Object(t.n)({template:i(994)})],n)}()},892:function(n,e,i){"use strict";i.d(e,"a",function(){return a});var t=i(1),u=this&&this.__decorate||function(n,e,i,t){var u,a=arguments.length,o=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,i,t);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,i,o):u(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},a=function(){function n(){this.data={mobilePhone:"",verifyCode:""}}return n.prototype.submit=function(){alert("通过了校验，提交成功了")},n=u([Object(t.n)({template:i(995)})],n)}()},985:function(n,e,i){"use strict";i.d(e,"a",function(){return d});var t=i(162),u=i(885),a=i(886),o=i(887),r=i(888),l=i(889),s=i(890),c=i(891),p=i(892),d=[{path:"button",component:u.a,canActivate:[t.a],data:{ts:i(996),html:i(997),doc:i(998)}},{path:"checkbox",component:a.a,canActivate:[t.a],data:{ts:i(999),html:i(1e3),doc:i(1001)}},{path:"radio",component:o.a,canActivate:[t.a],data:{ts:i(1002),html:i(1003),doc:i(1004)}},{path:"range",component:r.a,canActivate:[t.a],data:{ts:i(1005),html:i(1006),doc:i(1007)}},{path:"select",component:l.a,canActivate:[t.a],data:{ts:i(1008),html:i(1009),doc:i(1010)}},{path:"switch",component:s.a,canActivate:[t.a],data:{ts:i(1011),html:i(1012),doc:i(1013)}},{path:"form-validator",component:c.a,canActivate:[t.a],data:{ts:i(1014),html:i(1015),doc:i(1016)}},{path:"model-validator",component:p.a,canActivate:[t.a],data:{ts:i(1017),html:i(1018),doc:i(1019)}}]},986:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Button</ui-title> </ui-navbar> </ui-header> <ui-content> <p class="text-center"> <ui-button class="btn primary" [loading]="loadingState" (click)="load()"> 点我会出现加载效果 </ui-button> </p> </ui-content> </ui-page> '},987:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Checkbox</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Checkbox</h3> <p> <ui-input class="primary" type="checkbox"></ui-input> <ui-input class="info" type="checkbox"></ui-input> <ui-input class="danger" type="checkbox"></ui-input> <ui-input class="warning" type="checkbox"></ui-input> <ui-input class="success" type="checkbox"></ui-input> </p> <p style="font-size:30px"> <ui-input class="primary" type="checkbox"></ui-input> <ui-input class="info" type="checkbox"></ui-input> <ui-input class="danger" type="checkbox"></ui-input> <ui-input class="warning" type="checkbox"></ui-input> <ui-input class="success" type="checkbox"></ui-input> </p> <h3>包含在 label 内的</h3> <p> <label> <ui-input [(ngModel)]="c1" type="checkbox"></ui-input> 选项1为{{c1}}</label> </p> <p> <label> <ui-input [(ngModel)]="c2" type="checkbox"></ui-input> 选项2为{{c2}}</label> </p> <p> <label> <ui-input [(ngModel)]="c3" type="checkbox"></ui-input> 选项3为{{c3}}</label> </p> <h3>在 label 外的</h3> <p> <label for="id1">选项4为{{c4}}</label> <ui-input [(ngModel)]="c4" forId="id1" type="checkbox"></ui-input> </p> <p> <label for="id2">选项5为{{c5}}</label> <ui-input [(ngModel)]="c5" forId="id2" type="checkbox"></ui-input> </p> <p> <label for="id3">选项6为{{c6}}</label> <ui-input [(ngModel)]="c6" forId="id3" type="checkbox"></ui-input> </p> </div> </ui-content> </ui-page> '},988:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Radio</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Radio</h3> <p> <ui-input class="primary" type="radio"></ui-input> <ui-input class="info" type="radio"></ui-input> <ui-input class="danger" type="radio"></ui-input> <ui-input class="warning" type="radio"></ui-input> <ui-input class="success" type="radio"></ui-input> </p> <p style="font-size:30px"> <ui-input class="primary" type="radio"></ui-input> <ui-input class="info" type="radio"></ui-input> <ui-input class="danger" type="radio"></ui-input> <ui-input class="warning" type="radio"></ui-input> <ui-input class="success" type="radio"></ui-input> </p> <h3>包含在 label 内的</h3> <p>选中的值为{{r0}}</p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="a"></ui-input> 选项1</label> </p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="b"></ui-input> 选项2</label> </p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="c"></ui-input> 选项3</label> </p> <h3>在 label 外的</h3> <p>选中的值为{{r1}}</p> <p> <label for="id1">选项1</label> <ui-input [(ngModel)]="r1" forId="id1" type="radio" name="name2" value="1"></ui-input> </p> <p> <label for="id2">选项2</label> <ui-input [(ngModel)]="r1" forId="id2" type="radio" name="name2" value="2"></ui-input> </p> <p> <label for="id3">选项3</label> <ui-input [(ngModel)]="r1" forId="id3" type="radio" name="name2" value="3"></ui-input> </p> </div> </ui-content> </ui-page> '},989:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Range</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Range</h3> <p> <ui-input class="primary" type="range"></ui-input> </p> <h3>弹出进度</h3> <p> <ui-input [showProgress]="true" class="info" type="range"></ui-input> </p> <h3>设置步长</h3> <p> <ui-input [step]="5" [showProgress]="true" class="success" type="range"></ui-input> </p> <h3>设置最小值</h3> <p> <ui-input [min]="20" [showProgress]="true" class="danger" type="range"></ui-input> </p> <h3>设置最大值</h3> <p> <ui-input [max]="60" [showProgress]="true" class="warning" type="range"></ui-input> </p> <h3>当前的拖动的进度为{{progress}}</h3> <p> <ui-input type="range" [(ngModel)]="progress"></ui-input> </p> </div> </ui-content> </ui-page> '},990:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Select</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-list> <ui-list-item> <ui-list-inner> <ui-list-thumbnail>value为{{value}}</ui-list-thumbnail> <ui-select class="form-control" [(ngModel)]="value"> <ui-option value="1">选项1</ui-option> <ui-option value="2">选项2</ui-option> <ui-option value="3">选项3</ui-option> </ui-select> </ui-list-inner> </ui-list-item> </ui-list> </ui-content> </ui-page> '},991:function(n,e,i){var t=i(992);n.exports="string"==typeof t?t:t.toString()},992:function(n,e,i){e=n.exports=i(322)(!0),e.push([n.i,"ui-select{display:block;-webkit-box-flex:1;-ms-flex:1;flex:1}","",{version:3,sources:["/Users/tanbo/Documents/libraries/tanbo-ui-native-demo/src/pages/forms/components/select/select-example.component.scss"],names:[],mappings:"AAAA,UACI,cAAc,AACd,mBAAO,AAAP,WAAO,AAAP,MAAO,CACV",file:"select-example.component.scss",sourcesContent:["ui-select {\n    display: block;\n    flex: 1;\n}"],sourceRoot:""}])},993:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Switch</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Switch</h3> <p> <ui-switch class="primary"></ui-switch> <ui-switch class="info"></ui-switch> <ui-switch class="success"></ui-switch> <ui-switch class="danger"></ui-switch> <ui-switch class="warning"></ui-switch> </p> <p style="font-size:30px"> <ui-switch class="primary"></ui-switch> <ui-switch class="info"></ui-switch> <ui-switch class="success"></ui-switch> <ui-switch class="danger"></ui-switch> <ui-switch class="warning"></ui-switch> </p> <h3>是否选中 {{result}}</h3> <ui-switch [(ngModel)]="result"></ui-switch> </div> </ui-content> </ui-page> '},994:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>FormValidator</ui-title> </ui-navbar> </ui-header> <ui-content> <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()"> <ui-list> <ui-list-item> <ui-list-thumbnail>姓名：</ui-list-thumbnail> <ui-list-inner> <div><input type="text" class="form-control" #name="ngModel" [(ngModel)]="data.name" required minlength="3" name="name"> <div class="color-danger" *ngIf="name.errors && (name.dirty || name.touched)"> <span *ngIf="name.errors.required">必填项不能为空</span> <span *ngIf="name.errors.minlength">至少输入3个字符</span> </div> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-thumbnail>密码：</ui-list-thumbnail> <ui-list-inner> <div> <div><input type="text" class="form-control" #password="ngModel" [(ngModel)]="data.password" required minlength="8" name="password"></div> <div class="color-danger" *ngIf="password.errors && (password.dirty || password.touched)"> <span *ngIf="password.errors.required">必填项不能为空</span> <span *ngIf="password.errors.minlength">至少输入8个字符</span> </div> </div> </ui-list-inner> </ui-list-item> </ui-list> <p class="container"> <button type="submit" class="btn primary btn-block">提交</button> </p> </form> </ui-content> </ui-page> '},995:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>ModelValidator</ui-title> </ui-navbar> </ui-header> <ui-content> <p class="container">当获取验证码时，需要先校验手机号码</p> <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()"> <ui-list> <ui-list-item> <ui-list-thumbnail>手机号码：</ui-list-thumbnail> <ui-list-inner> <div> <input type="text" class="form-control" #mobilePhone="ngModel" [(ngModel)]="data.mobilePhone" required minlength="3" name="name"> <p class="color-danger" *ngIf="mobilePhone.errors && (mobilePhone.dirty || mobilePhone.touched)"> <span *ngIf="mobilePhone.errors.required">必填项不能为空</span> <span *ngIf="mobilePhone.errors.minlength">至少输入3个字符</span> </p> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-inner> <div> <button class="btn btn-primary" type="button" [uiValidateModel]="mobilePhone">点击获取验证码</button> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-thumbnail>密码：</ui-list-thumbnail> <ui-list-inner> <div> <input type="text" class="form-control" #verifyCode="ngModel" [(ngModel)]="data.verifyCode" required minlength="8" name="verifyCode"> <p class="color-danger" *ngIf="verifyCode.errors && (verifyCode.dirty || verifyCode.touched)"> <span *ngIf="verifyCode.errors.required">必填项不能为空</span> <span *ngIf="verifyCode.errors.minlength">至少输入8个字符</span> </p> </div> </ui-list-inner> </ui-list-item> </ui-list> <p class="container"> <button type="submit" class="btn primary btn-block">提交</button> </p> </form> </ui-content> </ui-page> '},996:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './button-example.component.html'\n})\nexport class ButtonExampleComponent {\n    loadingState: boolean = false;\n\n    load() {\n        this.loadingState = true;\n        setTimeout(() => {\n            this.loadingState = false;\n        }, 3000);\n    }\n}"},997:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Button</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <p class="text-center">\n      <ui-button class="btn primary" [loading]="loadingState" (click)="load()">\n        点我会出现加载效果\n      </ui-button>\n    </p>\n  </ui-content>\n</ui-page>\n'},998:function(n,e){n.exports="`ui-button` 组件提供了获取异步数据时的交互动画，通过设置 `loading` 属性，即可控制显示效果。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `disabled`     | `boolean`   | 是否禁用按扭 |\n| `loading`     | `boolean`   | 是否为 loading 状态 |\n| `type`     | `string`   | 按扭类型，可选值为 `submit`、`button` |"},999:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './checkbox-example.component.html'\n})\nexport class CheckboxExampleComponent {\n    c1: boolean = false;\n    c2: boolean = false;\n    c3: boolean = false;\n    c4: boolean = false;\n    c5: boolean = false;\n    c6: boolean = false;\n}"}});
//# sourceMappingURL=1.f5fb0e2d0db4b61a2b50.chunk.js.map