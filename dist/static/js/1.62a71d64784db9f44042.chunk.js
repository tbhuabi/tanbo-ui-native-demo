webpackJsonp([1],{503:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),t.d(e,"FormsExampleModule",function(){return k});var i=t(15),u=t(78),a=t(63),o=t(137),r=t(206),l=t(634),s=t(524),c=t(525),p=t(526),d=t(528),m=t(527),b=t(529),h=t(530),g=t(531),f=t(532),v=t(533),y=t(534),x=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},k=function(){function n(){}return n=x([Object(i.I)({imports:[a.b,u.h.forChild(l.a),r.e,o.a],declarations:[s.a,c.a,p.a,d.a,m.a,b.a,h.a,g.a,f.a,v.a,y.a]})],n)}()},524:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.loadingState=!1}return n.prototype.load=function(){var n=this;this.loadingState=!0,setTimeout(function(){n.loadingState=!1},3e3)},n=u([Object(i.n)({template:t(635)})],n)}()},525:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.c1=!1,this.c2=!1,this.c3=!1,this.c4=!1,this.c5=!1,this.c6=!1}return n=u([Object(i.n)({template:t(636)})],n)}()},526:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){}return n=u([Object(i.n)({template:t(637)})],n)}()},527:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.data=[{text:"浙江",value:1,children:[{text:"杭州",value:10,children:[{text:"江干区",value:100},{text:"上城区",value:101}]}]},{text:"江苏",value:2},{text:"四川",value:3,children:[{text:"成都",value:30,children:[{text:"双流区",value:301},{text:"武侯区",value:302}]},{text:"广元",value:31}]},{text:"河南",value:4},{text:"北京",value:5},{text:"海南",value:6}],this.result=""}return n.prototype.change=function(n){var e=this;this.result="",n.forEach(function(n){e.result+=" "+n.text})},n=u([Object(i.n)({template:t(638),styles:[t(639)]})],n)}()},528:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.r0="",this.r1=""}return n=u([Object(i.n)({template:t(641)})],n)}()},529:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.progress=50}return n=u([Object(i.n)({template:t(642)})],n)}()},530:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.type="1"}return n=u([Object(i.n)({template:t(643),styles:[t(644)]})],n)}()},531:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.value=1}return n=u([Object(i.n)({template:t(646),styles:[t(647)]})],n)}()},532:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.result=!1}return n.prototype.show=function(n){},n=u([Object(i.n)({template:t(649)})],n)}()},533:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.data={name:"",password:""}}return n.prototype.submit=function(){alert("通过了校验，提交成功了")},n=u([Object(i.n)({template:t(650)})],n)}()},534:function(n,e,t){"use strict";t.d(e,"a",function(){return a});var i=t(15),u=this&&this.__decorate||function(n,e,t,i){var u,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,e,t,i);else for(var r=n.length-1;r>=0;r--)(u=n[r])&&(o=(a<3?u(o):a>3?u(e,t,o):u(e,t))||o);return a>3&&o&&Object.defineProperty(e,t,o),o},a=function(){function n(){this.data={mobilePhone:"",verifyCode:""}}return n.prototype.submit=function(){alert("通过了校验，提交成功了")},n=u([Object(i.n)({template:t(651)})],n)}()},634:function(n,e,t){"use strict";t.d(e,"a",function(){return h});var i=t(136),u=t(524),a=t(525),o=t(526),r=t(527),l=t(528),s=t(529),c=t(530),p=t(531),d=t(532),m=t(533),b=t(534),h=[{path:"button",component:u.a,canActivate:[i.a],data:{ts:t(652),html:t(653),doc:t(654)}},{path:"checkbox",component:a.a,canActivate:[i.a],data:{ts:t(655),html:t(656),doc:t(657)}},{path:"date",component:o.a,canActivate:[i.a],data:{ts:t(658),html:t(659),doc:t(660)}},{path:"picker",component:r.a,canActivate:[i.a],data:{ts:t(661),html:t(662),css:t(663),doc:t(664)}},{path:"radio",component:l.a,canActivate:[i.a],data:{ts:t(665),html:t(666),doc:t(667)}},{path:"range",component:s.a,canActivate:[i.a],data:{ts:t(668),html:t(669),doc:t(670)}},{path:"segment",component:c.a,canActivate:[i.a],data:{ts:t(671),html:t(672),css:t(673),doc:t(674)}},{path:"select",component:p.a,canActivate:[i.a],data:{ts:t(675),html:t(676),doc:t(677)}},{path:"switch",component:d.a,canActivate:[i.a],data:{ts:t(678),html:t(679),doc:t(680)}},{path:"form-validator",component:m.a,canActivate:[i.a],data:{ts:t(681),html:t(682),doc:t(683)}},{path:"model-validator",component:b.a,canActivate:[i.a],data:{ts:t(684),html:t(685),doc:t(686)}}]},635:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Button</ui-title> </ui-navbar> </ui-header> <ui-content> <p class="ui-text-center"> <ui-button class="ui-btn ui-btn-primary" [loading]="loadingState" (click)="load()"> 点我会出现加载效果 </ui-button> </p> </ui-content> </ui-page> '},636:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Checkbox</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-scroll class="ui-container"> <h3>不同风格的 Checkbox</h3> <p> <ui-input class="ui-primary" type="checkbox"></ui-input> <ui-input class="ui-info" type="checkbox"></ui-input> <ui-input class="ui-danger" type="checkbox"></ui-input> <ui-input class="ui-warning" type="checkbox"></ui-input> <ui-input class="ui-success" type="checkbox"></ui-input> </p> <h3>包含在 label 内的</h3> <p> <label> <ui-input [(ngModel)]="c1" type="checkbox"></ui-input> 选项1为{{c1}}</label> </p> <p> <label> <ui-input [(ngModel)]="c2" type="checkbox"></ui-input> 选项2为{{c2}}</label> </p> <p> <label> <ui-input [(ngModel)]="c3" type="checkbox"></ui-input> 选项3为{{c3}}</label> </p> <h3>在 label 外的</h3> <p> <label for="id1">选项4为{{c4}}</label> <ui-input [(ngModel)]="c4" forId="id1" type="checkbox"></ui-input> </p> <p> <label for="id2">选项5为{{c5}}</label> <ui-input [(ngModel)]="c5" forId="id2" type="checkbox"></ui-input> </p> <p> <label for="id3">选项6为{{c6}}</label> <ui-input [(ngModel)]="c6" forId="id3" type="checkbox"></ui-input> </p> </ui-scroll> </ui-content> </ui-page> '},637:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Date</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-list> <ui-list-item> <ui-list-thumbnail>选择日期</ui-list-thumbnail> <ui-list-inner> <ui-input type="date" placeholder="请选择日期"></ui-input> </ui-list-inner> </ui-list-item> </ui-list> </ui-content> </ui-page> '},638:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Picker</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-list> <ui-list-item> <ui-list-inner> <div>请选择地区</div> <div class="ui-text-right ui-clearfix"> <ui-picker [data]="data" (uiChange)="change($event)" placeholder="请选择地区"> <div>{{result}}</div> </ui-picker> </div> </ui-list-inner> </ui-list-item> </ui-list> </ui-content> </ui-page>'},639:function(n,e,t){var i=t(640);n.exports="string"==typeof i?i:i.toString()},640:function(n,e,t){e=n.exports=t(205)(!0),e.push([n.i,".ui-text-right{-webkit-box-flex:1;-ms-flex:1;flex:1}","",{version:3,sources:["/Users/tanbo/Documents/libraries/tanbo-ui-native-demo/src/pages/forms/components/picker/picker-example.component.scss"],names:[],mappings:"AAAA,eACI,mBAAO,AAAP,WAAO,AAAP,MAAO,CACV",file:"picker-example.component.scss",sourcesContent:[".ui-text-right {\n    flex: 1;\n}"],sourceRoot:""}])},641:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Radio</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-scroll class="ui-container"> <h3>不同风格的 Radio</h3> <p> <ui-input class="ui-primary" type="radio"></ui-input> <ui-input class="ui-info" type="radio"></ui-input> <ui-input class="ui-danger" type="radio"></ui-input> <ui-input class="ui-warning" type="radio"></ui-input> <ui-input class="ui-success" type="radio"></ui-input> </p> <h3>包含在 label 内的</h3> <p>选中的值为{{r0}}</p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="a"></ui-input> 选项1</label> </p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="b"></ui-input> 选项2</label> </p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="c"></ui-input> 选项3</label> </p> <h3>在 label 外的</h3> <p>选中的值为{{r1}}</p> <p> <label for="id1">选项1</label> <ui-input [(ngModel)]="r1" forId="id1" type="radio" name="name2" value="1"></ui-input> </p> <p> <label for="id2">选项2</label> <ui-input [(ngModel)]="r1" forId="id2" type="radio" name="name2" value="2"></ui-input> </p> <p> <label for="id3">选项3</label> <ui-input [(ngModel)]="r1" forId="id3" type="radio" name="name2" value="3"></ui-input> </p> </ui-scroll> </ui-content> </ui-page> '},642:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Range</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-scroll class="ui-container"> <h3>不同风格的 Range</h3> <p> <ui-input class="ui-primary" type="range"></ui-input> </p> <h3>弹出进度</h3> <p> <ui-input [showProgress]="true" class="ui-info" type="range"></ui-input> </p> <h3>设置步长</h3> <p> <ui-input [step]="5" [showProgress]="true" class="ui-success" type="range"></ui-input> </p> <h3>设置最小值</h3> <p> <ui-input [min]="20" [showProgress]="true" class="ui-danger" type="range"></ui-input> </p> <h3>设置最大值</h3> <p> <ui-input [max]="60" [showProgress]="true" class="ui-warning" type="range"></ui-input> </p> <h3>当前的拖动的进度为{{progress}}</h3> <p> <ui-input type="range" [(ngModel)]="progress"></ui-input> </p> </ui-scroll> </ui-content> </ui-page> '},643:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Segment</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="top"> <ui-segment [(ngModel)]="type"> <ui-segment-button value="1">一</ui-segment-button> <ui-segment-button value="2">二</ui-segment-button> <ui-segment-button value="3">三</ui-segment-button> </ui-segment> </div> <ui-scroll [ngSwitch]="type"> <div *ngSwitchCase="\'1\'" style="background-color:gray">第一页</div> <div *ngSwitchCase="\'2\'" style="background-color:#faebd7">第二页</div> <div *ngSwitchCase="\'3\'" style="background-color:#008b8b">第三页</div> </ui-scroll> </ui-content> </ui-page> '},644:function(n,e,t){var i=t(645);n.exports="string"==typeof i?i:i.toString()},645:function(n,e,t){e=n.exports=t(205)(!0),e.push([n.i,".top{height:40px;padding-top:5px}ui-scroll{top:40px}ui-scroll>div{height:100%}","",{version:3,sources:["/Users/tanbo/Documents/libraries/tanbo-ui-native-demo/src/pages/forms/components/segment/segment-example.component.scss"],names:[],mappings:"AAAA,KACI,YAAY,AACZ,eAAgB,CACnB,AAED,UACI,QAAS,CAIZ,AALD,cAGQ,WAAY,CACf",file:"segment-example.component.scss",sourcesContent:[".top {\n    height: 40px;\n    padding-top: 5px;\n}\n\nui-scroll {\n    top: 40px;\n    > div {\n        height: 100%;\n    }\n}"],sourceRoot:""}])},646:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Select</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-list> <ui-list-item> <ui-list-inner> <ui-list-thumbnail>value为{{value}}</ui-list-thumbnail> <ui-select [(ngModel)]="value"> <ui-option value="1">选项1</ui-option> <ui-option value="2">选项2</ui-option> <ui-option value="3">选项3</ui-option> </ui-select> </ui-list-inner> </ui-list-item> </ui-list> </ui-content> </ui-page> '},647:function(n,e,t){var i=t(648);n.exports="string"==typeof i?i:i.toString()},648:function(n,e,t){e=n.exports=t(205)(!0),e.push([n.i,"ui-select{display:block;-webkit-box-flex:1;-ms-flex:1;flex:1;text-align:right}","",{version:3,sources:["/Users/tanbo/Documents/libraries/tanbo-ui-native-demo/src/pages/forms/components/select/select-example.component.scss"],names:[],mappings:"AAAA,UACI,cAAc,AACd,mBAAO,AAAP,WAAO,AAAP,OAAO,AACP,gBAAiB,CACpB",file:"select-example.component.scss",sourcesContent:["ui-select {\n    display: block;\n    flex: 1;\n    text-align: right;\n}"],sourceRoot:""}])},649:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Switch</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-scroll class="ui-container"> <h3>不同风格的 Switch</h3> <p> <ui-switch class="ui-primary"></ui-switch> <ui-switch class="ui-info"></ui-switch> <ui-switch class="ui-success"></ui-switch> <ui-switch class="ui-danger"></ui-switch> <ui-switch class="ui-warning"></ui-switch> </p> <h3>是否选中 {{result}}</h3> <ui-switch [(ngModel)]="result" (uiChange)="show($event)"></ui-switch> </ui-scroll> </ui-content> </ui-page> '},650:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>FormValidator</ui-title> </ui-navbar> </ui-header> <ui-content> <form novalidate [ui-validate-form]="form" #form="ngForm" (ngSubmit)="submit()"> <ui-list> <ui-list-item> <ui-list-thumbnail>姓名：</ui-list-thumbnail> <ui-list-inner> <div><input type="text" #name="ngModel" [(ngModel)]="data.name" required minlength="3" name="name"> <div class="ui-color-danger" *ngIf="name.errors && (name.dirty || name.touched)"> <span *ngIf="name.errors.required">必填项不能为空</span> <span *ngIf="name.errors.minlength">至少输入3个字符</span> </div> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-thumbnail>密码：</ui-list-thumbnail> <ui-list-inner> <div> <div><input type="text" #password="ngModel" [(ngModel)]="data.password" required minlength="8" name="password"></div> <div class="ui-color-danger" *ngIf="password.errors && (password.dirty || password.touched)"> <span *ngIf="password.errors.required">必填项不能为空</span> <span *ngIf="password.errors.minlength">至少输入8个字符</span> </div> </div> </ui-list-inner> </ui-list-item> </ui-list> <p class="ui-container"> <button type="submit" class="ui-btn ui-btn-primary ui-btn-block">提交</button> </p> </form> </ui-content> </ui-page> '},651:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>ModelValidator</ui-title> </ui-navbar> </ui-header> <ui-content> <p class="ui-container">当获取验证码时，需要先校验手机号码</p> <form novalidate [ui-validate-form]="form" #form="ngForm" (ngSubmit)="submit()"> <ui-list> <ui-list-item> <ui-list-thumbnail>手机号码：</ui-list-thumbnail> <ui-list-inner> <div> <input type="text" #mobilePhone="ngModel" [(ngModel)]="data.mobilePhone" required minlength="3" name="name"> <p class="ui-color-danger" *ngIf="mobilePhone.errors && (mobilePhone.dirty || mobilePhone.touched)"> <span *ngIf="mobilePhone.errors.required">必填项不能为空</span> <span *ngIf="mobilePhone.errors.minlength">至少输入3个字符</span> </p> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-inner> <div> <button class="ui-btn ui-btn-primary" type="button" [ui-validate-model]="mobilePhone">点击获取验证码</button> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-thumbnail>密码：</ui-list-thumbnail> <ui-list-inner> <div> <input type="text" class="form-control" #verifyCode="ngModel" [(ngModel)]="data.verifyCode" required minlength="8" name="verifyCode"> <p class="ui-color-danger" *ngIf="verifyCode.errors && (verifyCode.dirty || verifyCode.touched)"> <span *ngIf="verifyCode.errors.required">必填项不能为空</span> <span *ngIf="verifyCode.errors.minlength">至少输入8个字符</span> </p> </div> </ui-list-inner> </ui-list-item> </ui-list> <p class="ui-container"> <button type="submit" class="ui-btn ui-btn-primary ui-btn-block">提交</button> </p> </form> </ui-content> </ui-page> '},652:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './button-example.component.html'\n})\nexport class ButtonExampleComponent {\n    loadingState: boolean = false;\n\n    load() {\n        this.loadingState = true;\n        setTimeout(() => {\n            this.loadingState = false;\n        }, 3000);\n    }\n}"},653:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Button</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <p class="ui-text-center">\n      <ui-button class="ui-btn ui-btn-primary" [loading]="loadingState" (click)="load()">\n        点我会出现加载效果\n      </ui-button>\n    </p>\n  </ui-content>\n</ui-page>\n'},654:function(n,e){n.exports="`ui-button` 组件提供了获取异步数据时的交互动画，通过设置 `loading` 属性，即可控制显示效果。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `disabled`     | `boolean`   | 是否禁用按扭 |\n| `loading`     | `boolean`   | 是否为 loading 状态 |\n| `type`     | `string`   | 按扭类型，可选值为 `submit`、`button` |"},655:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './checkbox-example.component.html'\n})\nexport class CheckboxExampleComponent {\n    c1: boolean = false;\n    c2: boolean = false;\n    c3: boolean = false;\n    c4: boolean = false;\n    c5: boolean = false;\n    c6: boolean = false;\n}"},656:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Checkbox</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-scroll class="ui-container">\n      <h3>不同风格的 Checkbox</h3>\n      <p>\n        <ui-input class="ui-primary" type="checkbox"></ui-input>\n        <ui-input class="ui-info" type="checkbox"></ui-input>\n        <ui-input class="ui-danger" type="checkbox"></ui-input>\n        <ui-input class="ui-warning" type="checkbox"></ui-input>\n        <ui-input class="ui-success" type="checkbox"></ui-input>\n      </p>\n      <h3>包含在 label 内的</h3>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="c1" type="checkbox"></ui-input>\n          选项1为{{c1}}</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="c2" type="checkbox"></ui-input>\n          选项2为{{c2}}</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="c3" type="checkbox"></ui-input>\n          选项3为{{c3}}</label>\n      </p>\n      <h3>在 label 外的</h3>\n      <p>\n        <label for="id1">选项4为{{c4}}</label>\n        <ui-input [(ngModel)]="c4" forId="id1" type="checkbox"></ui-input>\n      </p>\n      <p>\n        <label for="id2">选项5为{{c5}}</label>\n        <ui-input [(ngModel)]="c5" forId="id2" type="checkbox"></ui-input>\n      </p>\n      <p>\n        <label for="id3">选项6为{{c6}}</label>\n        <ui-input [(ngModel)]="c6" forId="id3" type="checkbox"></ui-input>\n      </p>\n    </ui-scroll>\n  </ui-content>\n</ui-page>\n'},657:function(n,e){n.exports="`ui-input[type=checkbox]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `checked`     | `string` / `boolean`   | 设置是否选中  |\n| `checkedIcon`     | `string`   | 当控件选中时，显示的 icon class 名  |\n| `uncheckedIcon`     | `string`   | 当控件未选中时，显示的 icon class 名  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `boolean`   | `$event` 为当前控件是否选中。  |"},658:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './date-example.component.html'\n})\nexport class DateExampleComponent {\n}"},659:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Date</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-list>\n      <ui-list-item>\n        <ui-list-thumbnail>选择日期</ui-list-thumbnail>\n        <ui-list-inner>\n          <ui-input type="date" placeholder="请选择日期"></ui-input>\n        </ui-list-inner>\n      </ui-list-item>\n    </ui-list>\n  </ui-content>\n</ui-page>\n'},660:function(n,e){n.exports="`ui-input[type=date]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `value`      | `string`/`Date`/`number`   | 字符串，Date对象或一个时间戳  |\n| `name`      | `string`   | 表单的 name |\n| `format`      | `string`   | 默认 `yyyy-MM-dd`，当传为 `''` 时，change 事件传回的 value 为选中时间的时间戳 |\n| `displayFormat`      | `string`   | 默认 `yyyy-MM-dd`，显示在表单控件中的格式 |\n| `title`      | `string`   | 弹出控件的标题 |\n| `disabled`      | `boolean`   |  |\n| `readonly`      | `boolean`   |  |\n| `maxDate`      | `string`   | 最小时间，以年月日 时分秒的字符串传入，如2014-12-02、2103/03/23 09:34:09 |\n| `minDate`      | `string`   | 最大时间，以年月日 时分秒的字符串传入，如2014-12-02、2103/03/23 09:34:09 |\n\n### @Output()\n| 输出属性名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `number`/ `string`  | 根据 `format` 的不同，传回当前组件的 value |"},661:function(n,e){n.exports="import { Component } from '@angular/core';\nimport { PickerCell } from '@tanbo/ui-native';\n\n@Component({\n    templateUrl: './picker-example.component.html',\n    styleUrls: ['./picker-example.component.scss']\n})\nexport class PickerExampleComponent {\n    data: Array<PickerCell> = [{\n        text: '浙江',\n        value: 1,\n        children: [{\n            text: '杭州',\n            value: 10,\n            children: [{\n                text: '江干区',\n                value: 100\n            }, {\n                text: '上城区',\n                value: 101\n            }]\n        }]\n    }, {\n        text: '江苏',\n        value: 2\n    }, {\n        text: '四川',\n        value: 3,\n        children: [{\n            text: '成都',\n            value: 30,\n            children: [{\n                text: '双流区',\n                value: 301\n            }, {\n                text: '武侯区',\n                value: 302\n            }]\n        }, {\n            text: '广元',\n            value: 31\n        }]\n    }, {\n        text: '河南',\n        value: 4\n    }, {\n        text: '北京',\n        value: 5\n    }, {\n        text: '海南',\n        value: 6\n    }];\n\n    result: string = '';\n\n    change(cells: Array<PickerCell>) {\n        this.result = '';\n        cells.forEach(item => {\n            this.result += ' ' + item.text;\n        });\n    }\n}"},662:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Picker</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-list>\n      <ui-list-item>\n        <ui-list-inner>\n          <div>请选择地区</div>\n          <div class="ui-text-right ui-clearfix">\n            <ui-picker [data]="data" (uiChange)="change($event)" placeholder="请选择地区">\n              <div>{{result}}</div>\n            </ui-picker>\n          </div>\n        </ui-list-inner>\n      </ui-list-item>\n    </ui-list>\n\n  </ui-content>\n</ui-page>'},663:function(n,e){n.exports=".ui-text-right {\n    flex: 1;\n}"},664:function(n,e){n.exports="`picker`， 级联选择器，可以通过 `columnSize` 灵活控制级联数，需要注意的是，`picker` 控件选中后的结果，需要你来控制怎么显示，你可能通过监听 `uiChange` 事件，拿到选中的结果，就如果上面的示例一样。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `columnSize`     | `number`   | 设置级联层数  |\n| `placeholder`     | `string`   | 提示文字  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `boolean`   | `$event` 为当前控件选中的数据。  |"},665:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './radio-example.component.html'\n})\nexport class RadioExampleComponent {\n    r0: string = '';\n    r1: string = '';\n}"},666:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Radio</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-scroll class="ui-container">\n      <h3>不同风格的 Radio</h3>\n      <p>\n        <ui-input class="ui-primary" type="radio"></ui-input>\n        <ui-input class="ui-info" type="radio"></ui-input>\n        <ui-input class="ui-danger" type="radio"></ui-input>\n        <ui-input class="ui-warning" type="radio"></ui-input>\n        <ui-input class="ui-success" type="radio"></ui-input>\n      </p>\n      <h3>包含在 label 内的</h3>\n      <p>选中的值为{{r0}}</p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="a"></ui-input>\n          选项1</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="b"></ui-input>\n          选项2</label>\n      </p>\n      <p>\n        <label>\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="c"></ui-input>\n          选项3</label>\n      </p>\n      <h3>在 label 外的</h3>\n      <p>选中的值为{{r1}}</p>\n      <p>\n        <label for="id1">选项1</label>\n        <ui-input [(ngModel)]="r1" forId="id1" type="radio" name="name2" value="1"></ui-input>\n      </p>\n      <p>\n        <label for="id2">选项2</label>\n        <ui-input [(ngModel)]="r1" forId="id2" type="radio" name="name2" value="2"></ui-input>\n      </p>\n      <p>\n        <label for="id3">选项3</label>\n        <ui-input [(ngModel)]="r1" forId="id3" type="radio" name="name2" value="3"></ui-input>\n      </p>\n    </ui-scroll>\n  </ui-content>\n</ui-page>\n'},667:function(n,e){n.exports="`ui-input[type=radio]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `checked`     | `string` / `boolean`   | 设置是否选中  |\n| `checkedIcon`     | `string`   | 当控件选中时，显示的 icon class 名  |\n| `uncheckedIcon`     | `string`   | 当控件未选中时，显示的 icon class 名  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `string`   | `$event` 为当前选中控件的 value。  |"},668:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './range-example.component.html'\n})\nexport class RangeExampleComponent {\n    progress: number = 50;\n}"},669:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Range</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-scroll class="ui-container">\n      <h3>不同风格的 Range</h3>\n      <p>\n        <ui-input class="ui-primary" type="range"></ui-input>\n      </p>\n      <h3>弹出进度</h3>\n      <p>\n        <ui-input [showProgress]="true" class="ui-info" type="range"></ui-input>\n      </p>\n      <h3>设置步长</h3>\n      <p>\n        <ui-input [step]="5" [showProgress]="true" class="ui-success" type="range"></ui-input>\n      </p>\n      <h3>设置最小值</h3>\n      <p>\n        <ui-input [min]="20" [showProgress]="true" class="ui-danger" type="range"></ui-input>\n      </p>\n      <h3>设置最大值</h3>\n      <p>\n        <ui-input [max]="60" [showProgress]="true" class="ui-warning" type="range"></ui-input>\n      </p>\n      <h3>当前的拖动的进度为{{progress}}</h3>\n      <p>\n        <ui-input type="range" [(ngModel)]="progress"></ui-input>\n      </p>\n    </ui-scroll>\n  </ui-content>\n</ui-page>\n'},670:function(n,e){n.exports='`ui-input[type=range]` 组件的触摸功能 <strong class="color-danger">未做PC端兼容</strong>，只有在模拟器或手机上才有效果，你可以点击右上角的按扭，新开一个窗口，在模拟器中查看。\n\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `max`     | `number`   | 可选的最大值，默认为100  |\n| `min`     | `string`   | 可选的最小值，默认为0  |\n| `step`     | `string`   | 步长，默认为1  |\n| `showProgress`     | `boolean`   | 在拖动的时候是否弹出进度  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `number`   | `$event` 为控件的 value。  |'},671:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './segment-example.component.html',\n    styleUrls: ['./segment-example.component.scss']\n})\nexport class SegmentExampleComponent {\n    type: string = '1';\n}"},672:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Segment</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <div class="top">\n      <ui-segment [(ngModel)]="type">\n        <ui-segment-button value="1">一</ui-segment-button>\n        <ui-segment-button value="2">二</ui-segment-button>\n        <ui-segment-button value="3">三</ui-segment-button>\n      </ui-segment>\n    </div>\n    <ui-scroll [ngSwitch]="type">\n      <div *ngSwitchCase="\'1\'" style="background-color: gray;">第一页</div>\n      <div *ngSwitchCase="\'2\'" style="background-color: antiquewhite;">第二页</div>\n      <div *ngSwitchCase="\'3\'" style="background-color: darkcyan;">第三页</div>\n    </ui-scroll>\n  </ui-content>\n</ui-page>\n'},673:function(n,e){n.exports=".top {\n    height: 40px;\n    padding-top: 5px;\n}\n\nui-scroll {\n    top: 40px;\n    > div {\n        height: 100%;\n    }\n}"},674:function(n,e){n.exports="## ui-segment\n\n`ui-segment` 支持 `[(ngModel)]` 进行双向绑定。\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `selectedIndex`     | `number`   | 初始选中哪一项，默认为 0  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `number`   | `$event` 为控件的 value。  |\n\n\n## ui-segment-button\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `value`     | `any`   | 当前选项的值 |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `selected`     | `boolean`   | 是否默认选中当前控件 |\n\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChecked` | `SegmentButtonComponent`   | `$event` 为当前控件的实例。  |"},675:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './select-example.component.html',\n    styleUrls: ['./select-example.component.scss']\n})\nexport class SelectExampleComponent {\n    value: number = 1;\n}"},676:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Select</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-list>\n      <ui-list-item>\n        <ui-list-inner>\n          <ui-list-thumbnail>value为{{value}}</ui-list-thumbnail>\n          <ui-select [(ngModel)]="value">\n            <ui-option value="1">选项1</ui-option>\n            <ui-option value="2">选项2</ui-option>\n            <ui-option value="3">选项3</ui-option>\n          </ui-select>\n        </ui-list-inner>\n      </ui-list-item>\n    </ui-list>\n  </ui-content>\n</ui-page>\n'},677:function(n,e){n.exports="### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\n| `selectedIndex`     | `number`   | 初始选中哪一项，默认为 0  |\n| `cancelText`     | `string`   | 取消按扭的文字  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `number`   | `$event` 为控件的 value。  |\n\n\n## ui-option 组件\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `value`     | `string`   | 用于设置一项的值 |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前选项  |\n| `selected`     | `boolean`   | 初始是否选中  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChecked` | `OptionComponent`   | `$event` 为当前控件的实例。  |"},678:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: './switch-example.component.html'\n})\nexport class SwitchExampleComponent {\n  result: boolean = false;\n\n  show(value: boolean) {\n    console.log(value);\n  }\n}"},679:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>Switch</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <ui-scroll class="ui-container">\n      <h3>不同风格的 Switch</h3>\n      <p>\n        <ui-switch class="ui-primary"></ui-switch>\n        <ui-switch class="ui-info"></ui-switch>\n        <ui-switch class="ui-success"></ui-switch>\n        <ui-switch class="ui-danger"></ui-switch>\n        <ui-switch class="ui-warning"></ui-switch>\n      </p>\n      <h3>是否选中 {{result}}</h3>\n      <ui-switch [(ngModel)]="result" (uiChange)="show($event)"></ui-switch>\n    </ui-scroll>\n  </ui-content>\n</ui-page>\n'},680:function(n,e){n.exports="## ui-switch 组件\n\n### 输入属性 @Input() \n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `name`     | `string`   | 用于设置表单的 name |\n| `value`     | `string`   | 用于设置表单的 value |\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\n| `checked`     | `string` / `boolean`   | 是否选中当前项  |\n| `disabled`     | `string` / `boolean`   | 是否禁用当前选项  |\n| `readonly`     | `string` / `boolean`   | 当前项是否只读  |\n\n### 输出事件 @Output()\n\n| 输出事件名 | 输出值（$event）  | 说明    |\n| --        | --        | --        |\n| `uiChange` | `boolean`   |  |"},681:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './form-validator-example.component.html'\n})\nexport class FormValidatorExampleComponent {\n\n    data: any = {\n        name: '',\n        password: ''\n    };\n\n    submit() {\n        alert('通过了校验，提交成功了');\n    }\n}"},682:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>FormValidator</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <form novalidate [ui-validate-form]="form" #form="ngForm" (ngSubmit)="submit()">\n      <ui-list>\n        <ui-list-item>\n          <ui-list-thumbnail>姓名：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div><input type="text"\n                        #name="ngModel"\n                        [(ngModel)]="data.name"\n                        required\n                        minlength="3"\n                        name="name">\n              <div class="ui-color-danger" *ngIf="name.errors && (name.dirty || name.touched)">\n                <span *ngIf="name.errors.required">必填项不能为空</span>\n                <span *ngIf="name.errors.minlength">至少输入3个字符</span>\n              </div>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n        <ui-list-item>\n          <ui-list-thumbnail>密码：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div>\n              <div><input type="text"\n                          #password="ngModel"\n                          [(ngModel)]="data.password"\n                          required\n                          minlength="8"\n                          name="password"></div>\n              <div class="ui-color-danger" *ngIf="password.errors && (password.dirty || password.touched)">\n                <span *ngIf="password.errors.required">必填项不能为空</span>\n                <span *ngIf="password.errors.minlength">至少输入8个字符</span>\n              </div>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n      </ui-list>\n\n      <p class="ui-container">\n        <button type="submit" class="ui-btn ui-btn-primary ui-btn-block">提交</button>\n      </p>\n    </form>\n  </ui-content>\n</ui-page>\n'},683:function(n,e){n.exports="`ui-validate-form` 指令主要用来弥补表单提交时， angular 框架没有做二次校验的功能，通过`ui-validate-form`可以在用户点击提交表单时，再做一次校验。\n\n### 输入属性 @Input()\n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `ui-validate-form`      | `NgForm`   |  |"},684:function(n,e){n.exports="import { Component } from '@angular/core';\n\n@Component({\n    templateUrl: './model-validator-example.component.html'\n})\nexport class ModelValidatorExampleComponent {\n\n    data: any = {\n        mobilePhone: '',\n        verifyCode: ''\n    };\n\n    submit() {\n        alert('通过了校验，提交成功了');\n    }\n}"},685:function(n,e){n.exports='<ui-page>\n  <ui-header>\n    <ui-navbar>\n      <ui-back>首页</ui-back>\n      <ui-title>ModelValidator</ui-title>\n    </ui-navbar>\n  </ui-header>\n  <ui-content>\n    <p class="ui-container">当获取验证码时，需要先校验手机号码</p>\n    <form novalidate [ui-validate-form]="form" #form="ngForm" (ngSubmit)="submit()">\n      <ui-list>\n        <ui-list-item>\n          <ui-list-thumbnail>手机号码：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div>\n              <input type="text"\n                     #mobilePhone="ngModel"\n                     [(ngModel)]="data.mobilePhone"\n                     required\n                     minlength="3"\n                     name="name">\n              <p class="ui-color-danger" *ngIf="mobilePhone.errors && (mobilePhone.dirty || mobilePhone.touched)">\n                <span *ngIf="mobilePhone.errors.required">必填项不能为空</span>\n                <span *ngIf="mobilePhone.errors.minlength">至少输入3个字符</span>\n              </p>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n        <ui-list-item>\n          <ui-list-inner>\n            <div>\n              <button class="ui-btn ui-btn-primary" type="button" [ui-validate-model]="mobilePhone">点击获取验证码</button>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n        <ui-list-item>\n          <ui-list-thumbnail>密码：</ui-list-thumbnail>\n          <ui-list-inner>\n            <div>\n              <input type="text"\n                     class="form-control"\n                     #verifyCode="ngModel"\n                     [(ngModel)]="data.verifyCode"\n                     required\n                     minlength="8"\n                     name="verifyCode">\n              <p class="ui-color-danger" *ngIf="verifyCode.errors && (verifyCode.dirty || verifyCode.touched)">\n                <span *ngIf="verifyCode.errors.required">必填项不能为空</span>\n                <span *ngIf="verifyCode.errors.minlength">至少输入8个字符</span>\n              </p>\n            </div>\n          </ui-list-inner>\n        </ui-list-item>\n      </ui-list>\n      <p class="ui-container">\n        <button type="submit" class="ui-btn ui-btn-primary ui-btn-block">提交</button>\n      </p>\n    </form>\n  </ui-content>\n</ui-page>\n'},686:function(n,e){n.exports="`ui-validate-form` 主要用于在触发某件事时，需先校验某一个表单\n\n### 输入属性 @Input()\n\n| 输入属性名 | 输入类型  | 说明    |\n| --        | --        | --        |\n| `ui-validate-form`      | `NgModel`   |  |"}});