webpackJsonp([1],{1001:function(n,e,t){"use strict";t.d(e,"a",function(){return b});var r=t(164),i=t(898),u=t(899),a=t(900),o=t(901),l=t(902),s=t(903),c=t(904),p=t(905),d=t(906),m=t(907),h=t(908),b=[{path:"button",component:i.a,canActivate:[r.a],data:{ts:t(1019),html:t(1020),doc:t(1021)}},{path:"checkbox",component:u.a,canActivate:[r.a],data:{ts:t(1022),html:t(1023),doc:t(1024)}},{path:"date",component:a.a,canActivate:[r.a],data:{ts:t(1025),html:t(1026),doc:t(1027)}},{path:"picker",component:o.a,canActivate:[r.a],data:{ts:t(1028),html:t(1029),css:t(1030),doc:t(1031)}},{path:"radio",component:l.a,canActivate:[r.a],data:{ts:t(1032),html:t(1033),doc:t(1034)}},{path:"range",component:s.a,canActivate:[r.a],data:{ts:t(1035),html:t(1036),doc:t(1037)}},{path:"segment",component:c.a,canActivate:[r.a],data:{ts:t(1038),html:t(1039),css:t(1040),doc:t(1041)}},{path:"select",component:p.a,canActivate:[r.a],data:{ts:t(1042),html:t(1043),doc:t(1044)}},{path:"switch",component:d.a,canActivate:[r.a],data:{ts:t(1045),html:t(1046),doc:t(1047)}},{path:"form-validator",component:m.a,canActivate:[r.a],data:{ts:t(1048),html:t(1049),doc:t(1050)}},{path:"model-validator",component:h.a,canActivate:[r.a],data:{ts:t(1051),html:t(1052),doc:t(1053)}}]},1002:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Button</ui-title> </ui-navbar> </ui-header> <ui-content> <p class="text-center"> <ui-button class="btn primary" [loading]="loadingState" (click)="load()"> 点我会出现加载效果 </ui-button> </p> </ui-content> </ui-page> '},1003:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Checkbox</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Checkbox</h3> <p> <ui-input class="primary" type="checkbox"></ui-input> <ui-input class="info" type="checkbox"></ui-input> <ui-input class="danger" type="checkbox"></ui-input> <ui-input class="warning" type="checkbox"></ui-input> <ui-input class="success" type="checkbox"></ui-input> </p> <p style="font-size:30px"> <ui-input class="primary" type="checkbox"></ui-input> <ui-input class="info" type="checkbox"></ui-input> <ui-input class="danger" type="checkbox"></ui-input> <ui-input class="warning" type="checkbox"></ui-input> <ui-input class="success" type="checkbox"></ui-input> </p> <h3>包含在 label 内的</h3> <p> <label> <ui-input [(ngModel)]="c1" type="checkbox"></ui-input> 选项1为{{c1}}</label> </p> <p> <label> <ui-input [(ngModel)]="c2" type="checkbox"></ui-input> 选项2为{{c2}}</label> </p> <p> <label> <ui-input [(ngModel)]="c3" type="checkbox"></ui-input> 选项3为{{c3}}</label> </p> <h3>在 label 外的</h3> <p> <label for="id1">选项4为{{c4}}</label> <ui-input [(ngModel)]="c4" forId="id1" type="checkbox"></ui-input> </p> <p> <label for="id2">选项5为{{c5}}</label> <ui-input [(ngModel)]="c5" forId="id2" type="checkbox"></ui-input> </p> <p> <label for="id3">选项6为{{c6}}</label> <ui-input [(ngModel)]="c6" forId="id3" type="checkbox"></ui-input> </p> </div> </ui-content> </ui-page> '},1004:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Date</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-list> <ui-list-item> <ui-list-thumbnail>选择日期</ui-list-thumbnail> <ui-list-inner> <ui-input type="date"></ui-input> </ui-list-inner> </ui-list-item> </ui-list> </ui-content> </ui-page> '},1005:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Picker</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-list> <ui-list-item> <ui-list-inner> <div>请选择地区</div> <div class="text-right clearfix"> <ui-picker [data]="data" (change)="change($event)" placeholder="请选择地区"> <div>{{result}}</div> </ui-picker> </div> </ui-list-inner> </ui-list-item> </ui-list> </ui-content> </ui-page>'},1006:function(n,e,t){var r=t(1007);n.exports="string"==typeof r?r:r.toString()},1007:function(n,e,t){e=n.exports=t(328)(!0),e.push([n.i,".text-right{-webkit-box-flex:1;-ms-flex:1;flex:1}","",{version:3,sources:["E:/libraries/tanbo-ui-native-demo/src/pages/forms/components/picker/E:/libraries/tanbo-ui-native-demo/src/pages/forms/components/picker/picker-example.component.scss"],names:[],mappings:"AAAA,YACI,mBAAO,AAAP,WAAO,AAAP,MAAO,CACV",file:"picker-example.component.scss",sourcesContent:[".text-right {\r\n    flex: 1;\r\n}"],sourceRoot:""}])},1008:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Radio</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Radio</h3> <p> <ui-input class="primary" type="radio"></ui-input> <ui-input class="info" type="radio"></ui-input> <ui-input class="danger" type="radio"></ui-input> <ui-input class="warning" type="radio"></ui-input> <ui-input class="success" type="radio"></ui-input> </p> <p style="font-size:30px"> <ui-input class="primary" type="radio"></ui-input> <ui-input class="info" type="radio"></ui-input> <ui-input class="danger" type="radio"></ui-input> <ui-input class="warning" type="radio"></ui-input> <ui-input class="success" type="radio"></ui-input> </p> <h3>包含在 label 内的</h3> <p>选中的值为{{r0}}</p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="a"></ui-input> 选项1</label> </p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="b"></ui-input> 选项2</label> </p> <p> <label> <ui-input [(ngModel)]="r0" type="radio" name="name1" value="c"></ui-input> 选项3</label> </p> <h3>在 label 外的</h3> <p>选中的值为{{r1}}</p> <p> <label for="id1">选项1</label> <ui-input [(ngModel)]="r1" forId="id1" type="radio" name="name2" value="1"></ui-input> </p> <p> <label for="id2">选项2</label> <ui-input [(ngModel)]="r1" forId="id2" type="radio" name="name2" value="2"></ui-input> </p> <p> <label for="id3">选项3</label> <ui-input [(ngModel)]="r1" forId="id3" type="radio" name="name2" value="3"></ui-input> </p> </div> </ui-content> </ui-page> '},1009:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Range</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Range</h3> <p> <ui-input class="primary" type="range"></ui-input> </p> <h3>弹出进度</h3> <p> <ui-input [showProgress]="true" class="info" type="range"></ui-input> </p> <h3>设置步长</h3> <p> <ui-input [step]="5" [showProgress]="true" class="success" type="range"></ui-input> </p> <h3>设置最小值</h3> <p> <ui-input [min]="20" [showProgress]="true" class="danger" type="range"></ui-input> </p> <h3>设置最大值</h3> <p> <ui-input [max]="60" [showProgress]="true" class="warning" type="range"></ui-input> </p> <h3>当前的拖动的进度为{{progress}}</h3> <p> <ui-input type="range" [(ngModel)]="progress"></ui-input> </p> </div> </ui-content> </ui-page> '},1010:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Segment</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="top"> <ui-segment [(ngModel)]="type"> <ui-segment-button value="1">一</ui-segment-button> <ui-segment-button value="2">二</ui-segment-button> <ui-segment-button value="3">三</ui-segment-button> </ui-segment> </div> <ui-scroll [ngSwitch]="type"> <div *ngSwitchCase="\'1\'" style="background-color:gray">第一页</div> <div *ngSwitchCase="\'2\'" style="background-color:#faebd7">第二页</div> <div *ngSwitchCase="\'3\'" style="background-color:#008b8b">第三页</div> </ui-scroll> </ui-content> </ui-page> '},1011:function(n,e,t){var r=t(1012);n.exports="string"==typeof r?r:r.toString()},1012:function(n,e,t){e=n.exports=t(328)(!0),e.push([n.i,".top{height:40px;padding-top:5px}ui-scroll{top:40px}ui-scroll>div{height:100%}","",{version:3,sources:["E:/libraries/tanbo-ui-native-demo/src/pages/forms/components/segment/E:/libraries/tanbo-ui-native-demo/src/pages/forms/components/segment/segment-example.component.scss"],names:[],mappings:"AAAA,KACI,YAAY,AACZ,eAAgB,CACnB,AAED,UACI,QAAS,CAIZ,AALD,cAGQ,WAAY,CACf",file:"segment-example.component.scss",sourcesContent:[".top {\r\n    height: 40px;\r\n    padding-top: 5px;\r\n}\r\n\r\nui-scroll {\r\n    top: 40px;\r\n    > div {\r\n        height: 100%;\r\n    }\r\n}"],sourceRoot:""}])},1013:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Select</ui-title> </ui-navbar> </ui-header> <ui-content> <ui-list> <ui-list-item> <ui-list-inner> <ui-list-thumbnail>value为{{value}}</ui-list-thumbnail> <ui-select class="form-control" [(ngModel)]="value"> <ui-option value="1">选项1</ui-option> <ui-option value="2">选项2</ui-option> <ui-option value="3">选项3</ui-option> </ui-select> </ui-list-inner> </ui-list-item> </ui-list> </ui-content> </ui-page> '},1014:function(n,e,t){var r=t(1015);n.exports="string"==typeof r?r:r.toString()},1015:function(n,e,t){e=n.exports=t(328)(!0),e.push([n.i,"ui-select{display:block;-webkit-box-flex:1;-ms-flex:1;flex:1}","",{version:3,sources:["E:/libraries/tanbo-ui-native-demo/src/pages/forms/components/select/E:/libraries/tanbo-ui-native-demo/src/pages/forms/components/select/select-example.component.scss"],names:[],mappings:"AAAA,UACI,cAAc,AACd,mBAAO,AAAP,WAAO,AAAP,MAAO,CACV",file:"select-example.component.scss",sourcesContent:["ui-select {\r\n    display: block;\r\n    flex: 1;\r\n}"],sourceRoot:""}])},1016:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>Switch</ui-title> </ui-navbar> </ui-header> <ui-content> <div class="container"> <h3>不同风格的 Switch</h3> <p> <ui-switch class="primary"></ui-switch> <ui-switch class="info"></ui-switch> <ui-switch class="success"></ui-switch> <ui-switch class="danger"></ui-switch> <ui-switch class="warning"></ui-switch> </p> <p style="font-size:30px"> <ui-switch class="primary"></ui-switch> <ui-switch class="info"></ui-switch> <ui-switch class="success"></ui-switch> <ui-switch class="danger"></ui-switch> <ui-switch class="warning"></ui-switch> </p> <h3>是否选中 {{result}}</h3> <ui-switch [(ngModel)]="result"></ui-switch> </div> </ui-content> </ui-page> '},1017:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>FormValidator</ui-title> </ui-navbar> </ui-header> <ui-content> <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()"> <ui-list> <ui-list-item> <ui-list-thumbnail>姓名：</ui-list-thumbnail> <ui-list-inner> <div><input type="text" class="form-control" #name="ngModel" [(ngModel)]="data.name" required minlength="3" name="name"> <div class="color-danger" *ngIf="name.errors && (name.dirty || name.touched)"> <span *ngIf="name.errors.required">必填项不能为空</span> <span *ngIf="name.errors.minlength">至少输入3个字符</span> </div> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-thumbnail>密码：</ui-list-thumbnail> <ui-list-inner> <div> <div><input type="text" class="form-control" #password="ngModel" [(ngModel)]="data.password" required minlength="8" name="password"></div> <div class="color-danger" *ngIf="password.errors && (password.dirty || password.touched)"> <span *ngIf="password.errors.required">必填项不能为空</span> <span *ngIf="password.errors.minlength">至少输入8个字符</span> </div> </div> </ui-list-inner> </ui-list-item> </ui-list> <p class="container"> <button type="submit" class="btn primary btn-block">提交</button> </p> </form> </ui-content> </ui-page> '},1018:function(n,e){n.exports='<ui-page> <ui-header> <ui-navbar> <ui-back>首页</ui-back> <ui-title>ModelValidator</ui-title> </ui-navbar> </ui-header> <ui-content> <p class="container">当获取验证码时，需要先校验手机号码</p> <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()"> <ui-list> <ui-list-item> <ui-list-thumbnail>手机号码：</ui-list-thumbnail> <ui-list-inner> <div> <input type="text" class="form-control" #mobilePhone="ngModel" [(ngModel)]="data.mobilePhone" required minlength="3" name="name"> <p class="color-danger" *ngIf="mobilePhone.errors && (mobilePhone.dirty || mobilePhone.touched)"> <span *ngIf="mobilePhone.errors.required">必填项不能为空</span> <span *ngIf="mobilePhone.errors.minlength">至少输入3个字符</span> </p> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-inner> <div> <button class="btn btn-primary" type="button" [uiValidateModel]="mobilePhone">点击获取验证码</button> </div> </ui-list-inner> </ui-list-item> <ui-list-item> <ui-list-thumbnail>密码：</ui-list-thumbnail> <ui-list-inner> <div> <input type="text" class="form-control" #verifyCode="ngModel" [(ngModel)]="data.verifyCode" required minlength="8" name="verifyCode"> <p class="color-danger" *ngIf="verifyCode.errors && (verifyCode.dirty || verifyCode.touched)"> <span *ngIf="verifyCode.errors.required">必填项不能为空</span> <span *ngIf="verifyCode.errors.minlength">至少输入8个字符</span> </p> </div> </ui-list-inner> </ui-list-item> </ui-list> <p class="container"> <button type="submit" class="btn primary btn-block">提交</button> </p> </form> </ui-content> </ui-page> '},1019:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './button-example.component.html'\r\n})\r\nexport class ButtonExampleComponent {\r\n    loadingState: boolean = false;\r\n\r\n    load() {\r\n        this.loadingState = true;\r\n        setTimeout(() => {\r\n            this.loadingState = false;\r\n        }, 3000);\r\n    }\r\n}"},1020:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Button</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <p class="text-center">\r\n      <ui-button class="btn primary" [loading]="loadingState" (click)="load()">\r\n        点我会出现加载效果\r\n      </ui-button>\r\n    </p>\r\n  </ui-content>\r\n</ui-page>\r\n'},1021:function(n,e){n.exports="`ui-button` 组件提供了获取异步数据时的交互动画，通过设置 `loading` 属性，即可控制显示效果。\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `disabled`     | `boolean`   | 是否禁用按扭 |\r\n| `loading`     | `boolean`   | 是否为 loading 状态 |\r\n| `type`     | `string`   | 按扭类型，可选值为 `submit`、`button` |"},1022:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './checkbox-example.component.html'\r\n})\r\nexport class CheckboxExampleComponent {\r\n    c1: boolean = false;\r\n    c2: boolean = false;\r\n    c3: boolean = false;\r\n    c4: boolean = false;\r\n    c5: boolean = false;\r\n    c6: boolean = false;\r\n}"},1023:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Checkbox</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <div class="container">\r\n      <h3>不同风格的 Checkbox</h3>\r\n      <p>\r\n        <ui-input class="primary" type="checkbox"></ui-input>\r\n        <ui-input class="info" type="checkbox"></ui-input>\r\n        <ui-input class="danger" type="checkbox"></ui-input>\r\n        <ui-input class="warning" type="checkbox"></ui-input>\r\n        <ui-input class="success" type="checkbox"></ui-input>\r\n      </p>\r\n      <p style="font-size: 30px;">\r\n        <ui-input class="primary" type="checkbox"></ui-input>\r\n        <ui-input class="info" type="checkbox"></ui-input>\r\n        <ui-input class="danger" type="checkbox"></ui-input>\r\n        <ui-input class="warning" type="checkbox"></ui-input>\r\n        <ui-input class="success" type="checkbox"></ui-input>\r\n      </p>\r\n      <h3>包含在 label 内的</h3>\r\n      <p>\r\n        <label>\r\n          <ui-input [(ngModel)]="c1" type="checkbox"></ui-input>\r\n          选项1为{{c1}}</label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <ui-input [(ngModel)]="c2" type="checkbox"></ui-input>\r\n          选项2为{{c2}}</label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <ui-input [(ngModel)]="c3" type="checkbox"></ui-input>\r\n          选项3为{{c3}}</label>\r\n      </p>\r\n      <h3>在 label 外的</h3>\r\n      <p>\r\n        <label for="id1">选项4为{{c4}}</label>\r\n        <ui-input [(ngModel)]="c4" forId="id1" type="checkbox"></ui-input>\r\n      </p>\r\n      <p>\r\n        <label for="id2">选项5为{{c5}}</label>\r\n        <ui-input [(ngModel)]="c5" forId="id2" type="checkbox"></ui-input>\r\n      </p>\r\n      <p>\r\n        <label for="id3">选项6为{{c6}}</label>\r\n        <ui-input [(ngModel)]="c6" forId="id3" type="checkbox"></ui-input>\r\n      </p>\r\n    </div>\r\n  </ui-content>\r\n</ui-page>\r\n'},1024:function(n,e){n.exports="`ui-input[type=checkbox]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `name`     | `string`   | 用于设置表单的 name |\r\n| `value`     | `string`   | 用于设置表单的 value |\r\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\r\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\r\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\r\n| `checked`     | `string` / `boolean`   | 设置是否选中  |\r\n| `checkedIcon`     | `string`   | 当控件选中时，显示的 icon class 名  |\r\n| `uncheckedIcon`     | `string`   | 当控件未选中时，显示的 icon class 名  |\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `change` | `boolean`   | `$event` 为当前控件是否选中。  |"},1025:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './date-example.component.html'\r\n})\r\nexport class DateExampleComponent {\r\n}"},1026:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Date</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <ui-list>\r\n      <ui-list-item>\r\n        <ui-list-thumbnail>选择日期</ui-list-thumbnail>\r\n        <ui-list-inner>\r\n          <ui-input type="date"></ui-input>\r\n        </ui-list-inner>\r\n      </ui-list-item>\r\n    </ui-list>\r\n  </ui-content>\r\n</ui-page>\r\n'},1027:function(n,e){n.exports="`ui-input[type=date]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `value`      | `string`/`Date`/`number`   | 字符串，Date对象或一个时间戳  |\r\n| `name`      | `string`   | 表单的 name |\r\n| `format`      | `string`   | 默认 `yyyy-MM-dd`，当传为 `''` 时，change 事件传回的 value 为选中时间的时间戳 |\r\n| `displayFormat`      | `string`   | 默认 `yyyy-MM-dd`，显示在表单控件中的格式 |\r\n| `title`      | `string`   | 弹出控件的标题 |\r\n| `disabled`      | `boolean`   |  |\r\n| `readonly`      | `boolean`   |  |\r\n| `maxDate`      | `string`   | 最小时间，以年月日 时分秒的字符串传入，如2014-12-02、2103/03/23 09:34:09 |\r\n| `minDate`      | `string`   | 最大时间，以年月日 时分秒的字符串传入，如2014-12-02、2103/03/23 09:34:09 |\r\n\r\n### @Output()\r\n| 输出属性名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `change` | `number`/ `string`  | 根据 `format` 的不同，传回当前组件的 value |"},1028:function(n,e){n.exports="import { Component } from '@angular/core';\r\nimport { PickerCell } from 'tanbo-ui-native';\r\n\r\n@Component({\r\n    templateUrl: './picker-example.component.html',\r\n    styleUrls: ['./picker-example.component.scss']\r\n})\r\nexport class PickerExampleComponent {\r\n    data: Array<PickerCell> = [{\r\n        text: '浙江',\r\n        value: 1,\r\n        children: [{\r\n            text: '杭州',\r\n            value: 10,\r\n            children: [{\r\n                text: '江干区',\r\n                value: 100\r\n            }, {\r\n                text: '上城区',\r\n                value: 101\r\n            }]\r\n        }]\r\n    }, {\r\n        text: '江苏',\r\n        value: 2\r\n    }, {\r\n        text: '四川',\r\n        value: 3,\r\n        children: [{\r\n            text: '成都',\r\n            value: 30,\r\n            children: [{\r\n                text: '双流区',\r\n                value: 301\r\n            }, {\r\n                text: '武侯区',\r\n                value: 302\r\n            }]\r\n        }, {\r\n            text: '广元',\r\n            value: 31\r\n        }]\r\n    }, {\r\n        text: '河南',\r\n        value: 4\r\n    }, {\r\n        text: '北京',\r\n        value: 5\r\n    }, {\r\n        text: '海南',\r\n        value: 6\r\n    }];\r\n\r\n    result: string = '';\r\n\r\n    change(cells: Array<PickerCell>) {\r\n        this.result = '';\r\n        cells.forEach(item => {\r\n            this.result += ' ' + item.text;\r\n        });\r\n    }\r\n}"},1029:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Picker</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <ui-list>\r\n      <ui-list-item>\r\n        <ui-list-inner>\r\n          <div>请选择地区</div>\r\n          <div class="text-right clearfix">\r\n            <ui-picker [data]="data" (change)="change($event)" placeholder="请选择地区">\r\n              <div>{{result}}</div>\r\n            </ui-picker>\r\n          </div>\r\n        </ui-list-inner>\r\n      </ui-list-item>\r\n    </ui-list>\r\n\r\n  </ui-content>\r\n</ui-page>'},1030:function(n,e){n.exports=".text-right {\r\n    flex: 1;\r\n}"},1031:function(n,e){n.exports="`picker`， 级联选择器，可以通过 `columnSize` 灵活控制级联数，需要注意的是，`picker` 控件选中后的结果，需要你来控制怎么显示，你可能通过监听 `change` 事件，拿到选中的结果，就如果上面的示例一样。\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `name`     | `string`   | 用于设置表单的 name |\r\n| `value`     | `string`   | 用于设置表单的 value |\r\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\r\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\r\n| `columnSize`     | `number`   | 设置级联层数  |\r\n| `placeholder`     | `string`   | 提示文字  |\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `change` | `boolean`   | `$event` 为当前控件选中的数据。  |"},1032:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './radio-example.component.html'\r\n})\r\nexport class RadioExampleComponent {\r\n    r0: string = '';\r\n    r1: string = '';\r\n}"},1033:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Radio</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <div class="container">\r\n      <h3>不同风格的 Radio</h3>\r\n      <p>\r\n        <ui-input class="primary" type="radio"></ui-input>\r\n        <ui-input class="info" type="radio"></ui-input>\r\n        <ui-input class="danger" type="radio"></ui-input>\r\n        <ui-input class="warning" type="radio"></ui-input>\r\n        <ui-input class="success" type="radio"></ui-input>\r\n      </p>\r\n      <p style="font-size: 30px;">\r\n        <ui-input class="primary" type="radio"></ui-input>\r\n        <ui-input class="info" type="radio"></ui-input>\r\n        <ui-input class="danger" type="radio"></ui-input>\r\n        <ui-input class="warning" type="radio"></ui-input>\r\n        <ui-input class="success" type="radio"></ui-input>\r\n      </p>\r\n      <h3>包含在 label 内的</h3>\r\n      <p>选中的值为{{r0}}</p>\r\n      <p>\r\n        <label>\r\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="a"></ui-input>\r\n          选项1</label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="b"></ui-input>\r\n          选项2</label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <ui-input [(ngModel)]="r0" type="radio" name="name1" value="c"></ui-input>\r\n          选项3</label>\r\n      </p>\r\n      <h3>在 label 外的</h3>\r\n      <p>选中的值为{{r1}}</p>\r\n      <p>\r\n        <label for="id1">选项1</label>\r\n        <ui-input [(ngModel)]="r1" forId="id1" type="radio" name="name2" value="1"></ui-input>\r\n      </p>\r\n      <p>\r\n        <label for="id2">选项2</label>\r\n        <ui-input [(ngModel)]="r1" forId="id2" type="radio" name="name2" value="2"></ui-input>\r\n      </p>\r\n      <p>\r\n        <label for="id3">选项3</label>\r\n        <ui-input [(ngModel)]="r1" forId="id3" type="radio" name="name2" value="3"></ui-input>\r\n      </p>\r\n    </div>\r\n  </ui-content>\r\n</ui-page>\r\n'},1034:function(n,e){n.exports="`ui-input[type=radio]` 组件支持原生 `input` 的所有属性，你可以像原生 `input` 一样设置相应属性。同时也支持 `[(ngModel)]` 指令。\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `name`     | `string`   | 用于设置表单的 name |\r\n| `value`     | `string`   | 用于设置表单的 value |\r\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\r\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\r\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\r\n| `checked`     | `string` / `boolean`   | 设置是否选中  |\r\n| `checkedIcon`     | `string`   | 当控件选中时，显示的 icon class 名  |\r\n| `uncheckedIcon`     | `string`   | 当控件未选中时，显示的 icon class 名  |\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `change` | `string`   | `$event` 为当前选中控件的 value。  |"},1035:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './range-example.component.html'\r\n})\r\nexport class RangeExampleComponent {\r\n    progress: number = 50;\r\n}"},1036:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Range</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <div class="container">\r\n      <h3>不同风格的 Range</h3>\r\n      <p>\r\n        <ui-input class="primary" type="range"></ui-input>\r\n      </p>\r\n      <h3>弹出进度</h3>\r\n      <p>\r\n        <ui-input [showProgress]="true" class="info" type="range"></ui-input>\r\n      </p>\r\n      <h3>设置步长</h3>\r\n      <p>\r\n        <ui-input [step]="5" [showProgress]="true" class="success" type="range"></ui-input>\r\n      </p>\r\n      <h3>设置最小值</h3>\r\n      <p>\r\n        <ui-input [min]="20" [showProgress]="true" class="danger" type="range"></ui-input>\r\n      </p>\r\n      <h3>设置最大值</h3>\r\n      <p>\r\n        <ui-input [max]="60" [showProgress]="true" class="warning" type="range"></ui-input>\r\n      </p>\r\n      <h3>当前的拖动的进度为{{progress}}</h3>\r\n      <p>\r\n        <ui-input type="range" [(ngModel)]="progress"></ui-input>\r\n      </p>\r\n    </div>\r\n  </ui-content>\r\n</ui-page>\r\n'},1037:function(n,e){n.exports='`ui-input[type=range]` 组件的触摸功能 <strong class="color-danger">未做PC端兼容</strong>，只有在模拟器或手机上才有效果，你可以点击右上角的按扭，新开一个窗口，在模拟器中查看。\r\n\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `name`     | `string`   | 用于设置表单的 name |\r\n| `value`     | `string`   | 用于设置表单的 value |\r\n| `forId`     | `string`   | 用于关联 label 标签的 for 属性  |\r\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\r\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\r\n| `max`     | `number`   | 可选的最大值，默认为100  |\r\n| `min`     | `string`   | 可选的最小值，默认为0  |\r\n| `step`     | `string`   | 步长，默认为1  |\r\n| `showProgress`     | `boolean`   | 在拖动的时候是否弹出进度  |\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `change` | `number`   | `$event` 为控件的 value。  |'},1038:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './segment-example.component.html',\r\n    styleUrls: ['./segment-example.component.scss']\r\n})\r\nexport class SegmentExampleComponent {\r\n    type: string = '1';\r\n}"},1039:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Segment</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <div class="top">\r\n      <ui-segment [(ngModel)]="type">\r\n        <ui-segment-button value="1">一</ui-segment-button>\r\n        <ui-segment-button value="2">二</ui-segment-button>\r\n        <ui-segment-button value="3">三</ui-segment-button>\r\n      </ui-segment>\r\n    </div>\r\n    <ui-scroll [ngSwitch]="type">\r\n      <div *ngSwitchCase="\'1\'" style="background-color: gray;">第一页</div>\r\n      <div *ngSwitchCase="\'2\'" style="background-color: antiquewhite;">第二页</div>\r\n      <div *ngSwitchCase="\'3\'" style="background-color: darkcyan;">第三页</div>\r\n    </ui-scroll>\r\n  </ui-content>\r\n</ui-page>\r\n'},1040:function(n,e){n.exports=".top {\r\n    height: 40px;\r\n    padding-top: 5px;\r\n}\r\n\r\nui-scroll {\r\n    top: 40px;\r\n    > div {\r\n        height: 100%;\r\n    }\r\n}"},1041:function(n,e){n.exports="## ui-segment\r\n\r\n`ui-segment` 支持 `[(ngModel)]` 进行双向绑定。\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `selectedIndex`     | `number`   | 初始选中哪一项，默认为 0  |\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `change` | `number`   | `$event` 为控件的 value。  |\r\n\r\n\r\n## ui-segment-button\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `value`     | `any`   | 当前选项的值 |\r\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\r\n| `selected`     | `boolean`   | 是否默认选中当前控件 |\r\n\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `checked` | `SegmentButtonComponent`   | `$event` 为当前控件的实例。  |"},1042:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './select-example.component.html',\r\n    styleUrls: ['./select-example.component.scss']\r\n})\r\nexport class SelectExampleComponent {\r\n    value: number = 1;\r\n}"},1043:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Select</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <ui-list>\r\n      <ui-list-item>\r\n        <ui-list-inner>\r\n          <ui-list-thumbnail>value为{{value}}</ui-list-thumbnail>\r\n          <ui-select class="form-control" [(ngModel)]="value">\r\n            <ui-option value="1">选项1</ui-option>\r\n            <ui-option value="2">选项2</ui-option>\r\n            <ui-option value="3">选项3</ui-option>\r\n          </ui-select>\r\n        </ui-list-inner>\r\n      </ui-list-item>\r\n    </ui-list>\r\n  </ui-content>\r\n</ui-page>\r\n'},1044:function(n,e){n.exports="### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `name`     | `string`   | 用于设置表单的 name |\r\n| `disabled`     | `string` / `boolean`   | 是否禁用当前控件  |\r\n| `readonly`     | `string` / `boolean`   | 是否设置当前控件为只读  |\r\n| `selectedIndex`     | `number`   | 初始选中哪一项，默认为 0  |\r\n| `cancelText`     | `string`   | 取消按扭的文字  |\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `change` | `number`   | `$event` 为控件的 value。  |\r\n\r\n\r\n## ui-option 组件\r\n\r\n### 输入属性 @Input() \r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `value`     | `string`   | 用于设置一项的值 |\r\n| `disabled`     | `string` / `boolean`   | 是否禁用当前选项  |\r\n| `selected`     | `boolean`   | 初始是否选中  |\r\n\r\n### 输出事件 @Output()\r\n\r\n| 输出事件名 | 输出值（$event）  | 说明    |\r\n| --        | --        | --        |\r\n| `checked` | `OptionComponent`   | `$event` 为当前控件的实例。  |"},1045:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './switch-example.component.html'\r\n})\r\nexport class SwitchExampleComponent {\r\n    result: boolean = false;\r\n}"},1046:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>Switch</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <div class="container">\r\n      <h3>不同风格的 Switch</h3>\r\n      <p>\r\n        <ui-switch class="primary"></ui-switch>\r\n        <ui-switch class="info"></ui-switch>\r\n        <ui-switch class="success"></ui-switch>\r\n        <ui-switch class="danger"></ui-switch>\r\n        <ui-switch class="warning"></ui-switch>\r\n      </p>\r\n      <p style="font-size: 30px;">\r\n        <ui-switch class="primary"></ui-switch>\r\n        <ui-switch class="info"></ui-switch>\r\n        <ui-switch class="success"></ui-switch>\r\n        <ui-switch class="danger"></ui-switch>\r\n        <ui-switch class="warning"></ui-switch>\r\n      </p>\r\n      <h3>是否选中 {{result}}</h3>\r\n      <ui-switch [(ngModel)]="result"></ui-switch>\r\n    </div>\r\n  </ui-content>\r\n</ui-page>\r\n'},1047:function(n,e){n.exports=""},1048:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './form-validator-example.component.html'\r\n})\r\nexport class FormValidatorExampleComponent {\r\n\r\n    data: any = {\r\n        name: '',\r\n        password: ''\r\n    };\r\n\r\n    submit() {\r\n        alert('通过了校验，提交成功了');\r\n    }\r\n}"},1049:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>FormValidator</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()">\r\n      <ui-list>\r\n        <ui-list-item>\r\n          <ui-list-thumbnail>姓名：</ui-list-thumbnail>\r\n          <ui-list-inner>\r\n            <div><input type="text"\r\n                        class="form-control"\r\n                        #name="ngModel"\r\n                        [(ngModel)]="data.name"\r\n                        required\r\n                        minlength="3"\r\n                        name="name">\r\n              <div class="color-danger" *ngIf="name.errors && (name.dirty || name.touched)">\r\n                <span *ngIf="name.errors.required">必填项不能为空</span>\r\n                <span *ngIf="name.errors.minlength">至少输入3个字符</span>\r\n              </div>\r\n            </div>\r\n          </ui-list-inner>\r\n        </ui-list-item>\r\n        <ui-list-item>\r\n          <ui-list-thumbnail>密码：</ui-list-thumbnail>\r\n          <ui-list-inner>\r\n            <div>\r\n              <div><input type="text"\r\n                          class="form-control"\r\n                          #password="ngModel"\r\n                          [(ngModel)]="data.password"\r\n                          required\r\n                          minlength="8"\r\n                          name="password"></div>\r\n              <div class="color-danger" *ngIf="password.errors && (password.dirty || password.touched)">\r\n                <span *ngIf="password.errors.required">必填项不能为空</span>\r\n                <span *ngIf="password.errors.minlength">至少输入8个字符</span>\r\n              </div>\r\n            </div>\r\n          </ui-list-inner>\r\n        </ui-list-item>\r\n      </ui-list>\r\n\r\n      <p class="container">\r\n        <button type="submit" class="btn primary btn-block">提交</button>\r\n      </p>\r\n    </form>\r\n  </ui-content>\r\n</ui-page>\r\n'},1050:function(n,e){n.exports="`uiValidateForm` 组件主要用来弥补表单提交时， angular 框架没有做二次校验的功能，通过`uiValidateForm`可以在用户点击提交表单时，再做一次校验。\r\n\r\n### 输入属性 @Input()\r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `uiValidateForm`      | `NgForm`   |  |"},1051:function(n,e){n.exports="import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './model-validator-example.component.html'\r\n})\r\nexport class ModelValidatorExampleComponent {\r\n\r\n    data: any = {\r\n        mobilePhone: '',\r\n        verifyCode: ''\r\n    };\r\n\r\n    submit() {\r\n        alert('通过了校验，提交成功了');\r\n    }\r\n}"},1052:function(n,e){n.exports='<ui-page>\r\n  <ui-header>\r\n    <ui-navbar>\r\n      <ui-back>首页</ui-back>\r\n      <ui-title>ModelValidator</ui-title>\r\n    </ui-navbar>\r\n  </ui-header>\r\n  <ui-content>\r\n    <p class="container">当获取验证码时，需要先校验手机号码</p>\r\n    <form novalidate [uiValidateForm]="form" #form="ngForm" (ngSubmit)="submit()">\r\n      <ui-list>\r\n        <ui-list-item>\r\n          <ui-list-thumbnail>手机号码：</ui-list-thumbnail>\r\n          <ui-list-inner>\r\n            <div>\r\n              <input type="text"\r\n                     class="form-control"\r\n                     #mobilePhone="ngModel"\r\n                     [(ngModel)]="data.mobilePhone"\r\n                     required\r\n                     minlength="3"\r\n                     name="name">\r\n              <p class="color-danger" *ngIf="mobilePhone.errors && (mobilePhone.dirty || mobilePhone.touched)">\r\n                <span *ngIf="mobilePhone.errors.required">必填项不能为空</span>\r\n                <span *ngIf="mobilePhone.errors.minlength">至少输入3个字符</span>\r\n              </p>\r\n            </div>\r\n          </ui-list-inner>\r\n        </ui-list-item>\r\n        <ui-list-item>\r\n          <ui-list-inner>\r\n            <div>\r\n              <button class="btn btn-primary" type="button" [uiValidateModel]="mobilePhone">点击获取验证码</button>\r\n            </div>\r\n          </ui-list-inner>\r\n        </ui-list-item>\r\n        <ui-list-item>\r\n          <ui-list-thumbnail>密码：</ui-list-thumbnail>\r\n          <ui-list-inner>\r\n            <div>\r\n              <input type="text"\r\n                     class="form-control"\r\n                     #verifyCode="ngModel"\r\n                     [(ngModel)]="data.verifyCode"\r\n                     required\r\n                     minlength="8"\r\n                     name="verifyCode">\r\n              <p class="color-danger" *ngIf="verifyCode.errors && (verifyCode.dirty || verifyCode.touched)">\r\n                <span *ngIf="verifyCode.errors.required">必填项不能为空</span>\r\n                <span *ngIf="verifyCode.errors.minlength">至少输入8个字符</span>\r\n              </p>\r\n            </div>\r\n          </ui-list-inner>\r\n        </ui-list-item>\r\n      </ui-list>\r\n      <p class="container">\r\n        <button type="submit" class="btn primary btn-block">提交</button>\r\n      </p>\r\n    </form>\r\n  </ui-content>\r\n</ui-page>\r\n'},1053:function(n,e){n.exports="`uiValidateModel` 主要用于在触发某件事时，需先校验某一个表单\r\n\r\n### 输入属性 @Input()\r\n\r\n| 输入属性名 | 输入类型  | 说明    |\r\n| --        | --        | --        |\r\n| `uiValidateModel`      | `NgModel`   |  |"},878:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),t.d(e,"FormsExampleModule",function(){return k});var r=t(1),i=t(46),u=t(39),a=t(22),o=t(329),l=t(1001),s=t(898),c=t(899),p=t(900),d=t(902),m=t(901),h=t(903),b=t(904),g=t(905),f=t(906),v=t(907),y=t(908),x=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},k=function(){function n(){}return n=x([Object(r.I)({imports:[u.b,i.h.forChild(l.a),o.g,o.e,a.a],declarations:[s.a,c.a,p.a,d.a,m.a,h.a,b.a,g.a,f.a,v.a,y.a]})],n)}()},898:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.loadingState=!1}return n.prototype.load=function(){var n=this;this.loadingState=!0,setTimeout(function(){n.loadingState=!1},3e3)},n=i([Object(r.n)({template:t(1002)})],n)}()},899:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.c1=!1,this.c2=!1,this.c3=!1,this.c4=!1,this.c5=!1,this.c6=!1}return n=i([Object(r.n)({template:t(1003)})],n)}()},900:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){}return n=i([Object(r.n)({template:t(1004)})],n)}()},901:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.data=[{text:"浙江",value:1,children:[{text:"杭州",value:10,children:[{text:"江干区",value:100},{text:"上城区",value:101}]}]},{text:"江苏",value:2},{text:"四川",value:3,children:[{text:"成都",value:30,children:[{text:"双流区",value:301},{text:"武侯区",value:302}]},{text:"广元",value:31}]},{text:"河南",value:4},{text:"北京",value:5},{text:"海南",value:6}],this.result=""}return n.prototype.change=function(n){var e=this;this.result="",n.forEach(function(n){e.result+=" "+n.text})},n=i([Object(r.n)({template:t(1005),styles:[t(1006)]})],n)}()},902:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.r0="",this.r1=""}return n=i([Object(r.n)({template:t(1008)})],n)}()},903:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.progress=50}return n=i([Object(r.n)({template:t(1009)})],n)}()},904:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.type="1"}return n=i([Object(r.n)({template:t(1010),styles:[t(1011)]})],n)}()},905:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.value=1}return n=i([Object(r.n)({template:t(1013),styles:[t(1014)]})],n)}()},906:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.result=!1}return n=i([Object(r.n)({template:t(1016)})],n)}()},907:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.data={name:"",password:""}}return n.prototype.submit=function(){alert("通过了校验，提交成功了")},n=i([Object(r.n)({template:t(1017)})],n)}()},908:function(n,e,t){"use strict";t.d(e,"a",function(){return u});var r=t(1),i=this&&this.__decorate||function(n,e,t,r){var i,u=arguments.length,a=u<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,e,t,r);else for(var o=n.length-1;o>=0;o--)(i=n[o])&&(a=(u<3?i(a):u>3?i(e,t,a):i(e,t))||a);return u>3&&a&&Object.defineProperty(e,t,a),a},u=function(){function n(){this.data={mobilePhone:"",verifyCode:""}}return n.prototype.submit=function(){alert("通过了校验，提交成功了")},n=i([Object(r.n)({template:t(1018)})],n)}()}});